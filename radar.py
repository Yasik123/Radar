import os
import re
import asyncio
import logging
from datetime import datetime, timedelta

from telethon import TelegramClient, events
from telethon.tl.functions.messages import SendMessageRequest, DeleteMessagesRequest

# .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
api_id = 17082218
api_hash = '6015a38682c3f6265ac55a1e35b1240a'
source_channel = -1002279229082
destination_channel = -1002264693466 
admin_user_id = 7660007619

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("RadarBot")

client = TelegramClient("radar_bot", api_id, api_hash)

last_message_time = datetime.utcnow()

# –®–∞–±–ª–æ–Ω—ã
subscribe_replace = 'üá∫üá¶ <a href="https://t.me/+9RxqorgcHYZkYTQy">–ù–µ–±–µ—Å–Ω–∏–π –í–∞—Ä—Ç–æ–≤–∏–π</a>'
subscribe_pattern = re.compile(r"‚û°Ô∏è–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è.*", re.IGNORECASE)
tme_links_pattern = re.compile(r"(https?://t\.me/\S+|\(https?://t\.me/\S+\))")
lines_to_remove = [
    re.compile(r"–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å.*", re.IGNORECASE),
    re.compile(r"üîó–ü–æ—Å–∏–ª–∞–Ω–Ω—è.*", re.IGNORECASE),
    re.compile(r"‚û°Ô∏è–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è.*", re.IGNORECASE),
    re.compile(r"„Ö§", re.IGNORECASE),
    re.compile(r".*–ü–æ–¥—Ä–æ–±–∏—Ü—ñ.*", re.IGNORECASE),
    re.compile(r".*–°—Ç–µ–∂–∏—Ç–∏.*", re.IGNORECASE)
]

# –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω—É
def filter_lines(text):
    lines = text.splitlines()
    clean_lines = []
    for line in lines:
        if any(p.search(line) for p in lines_to_remove):
            continue
        clean_lines.append(line.strip())
    return clean_lines

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def process_message(text):
    text = subscribe_pattern.sub(subscribe_replace, text)
    text = tme_links_pattern.sub('', text)
    lines = filter_lines(text)
    return "<b>" + lines[0] + "</b>" if lines else None

# –§–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def send_fake_message():
    try:
        msg = await client.send_message(destination_channel, ".")
        await asyncio.sleep(2)
        await client.delete_messages(destination_channel, msg.id)
        logger.info("üì° –§–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–µ–π–∫–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
async def monitor_inactivity():
    global last_message_time
    while True:
        await asyncio.sleep(600)
        now = datetime.utcnow()
        if (now - last_message_time) > timedelta(minutes=10):
            try:
                await client.send_message(admin_user_id, "‚ö†Ô∏è –ë–û–¢ –±–µ–∑–¥–µ–π—Å—Ç–≤—É–µ—Ç –±–æ–ª–µ–µ 10 –º–∏–Ω—É—Ç!")
                logger.warning("üì≠ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ–± –±–µ–∑–¥–µ–π—Å—Ç–≤–∏–∏.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –õ–° –∞–¥–º–∏–Ω—É: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@client.on(events.NewMessage(chats=source_channel))
async def handler(event):
    global last_message_time
    last_message_time = datetime.utcnow()

    try:
        text = event.message.raw_text or ""
        media = event.message.media

        result = process_message(text)
        if not result:
            logger.info("üö´ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
            return

        if media:
            await client.send_file(destination_channel, media, caption=result, parse_mode='html')
            logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å —Ñ–æ—Ç–æ: " + result)
        else:
            await client.send_message(destination_channel, result, parse_mode='html')
            logger.info("‚úâÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ: " + result)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
async def main():
    await client.start()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    asyncio.create_task(monitor_inactivity())
    asyncio.create_task(fake_loop())

    await client.run_until_disconnected()

# –¶–∏–∫–ª —Ñ–µ–π–∫–æ–≤
async def fake_loop():
    while True:
        await send_fake_message()
        await asyncio.sleep(300)

if __name__ == "__main__":
    asyncio.run(main())
