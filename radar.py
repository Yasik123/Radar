import os
import re
import logging
import asyncio
import random
from datetime import datetime, timedelta
from collections import deque
from flask import Flask
from telethon import TelegramClient, events

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
api_id = 17082218
api_hash = '6015a38682c3f6265ac55a1e35b1240a'
source_channel_id = -1002279229082
destination_channel_id = -1002264693466 
owner_id = 7660007619

# === –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

# === Telegram –∫–ª–∏–µ–Ω—Ç ===
client = TelegramClient("radar_session", api_id, api_hash)
message_queue = deque()
last_activity_time = datetime.now()

# === –í–µ–±-—Å–µ—Ä–≤–µ—Ä (–¥–ª—è Render) ===
flask_app = Flask(__name__)

@flask_app.route('/')
def home():
    return "Radar bot is running!", 200

def run_flask():
    port = int(os.getenv("PORT", 10000))
    flask_app.run(host="0.0.0.0", port=port)

# === –§–µ–π–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ ===
async def send_fake_message():
    try:
        sent = await client.send_message(destination_channel_id, ".")
        await asyncio.sleep(2)
        await client.delete_messages(destination_channel_id, sent.id)
        logger.info("üí¨ –§–µ–π–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–µ–π–∫–∞", exc_info=True)

# === –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π —Ñ–µ–π–∫ ===
async def periodic_fake_message():
    while True:
        await send_fake_message()
        await asyncio.sleep(300)

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—Å—Ç–æ–µ ===
async def check_inactivity():
    global last_activity_time
    while True:
        if datetime.now() - last_activity_time > timedelta(minutes=10):
            try:
                await client.send_message(owner_id, "‚ö†Ô∏è –ë–û–¢ –±–µ–∑–¥–µ–π—Å—Ç–≤—É–µ—Ç 10 –º–∏–Ω—É—Ç")
                last_activity_time = datetime.now()
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü—É", exc_info=True)
        await asyncio.sleep(60)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@client.on(events.NewMessage(chats=source_channel_id))
async def handler(event):
    global last_activity_time
    try:
        msg_text = event.message.raw_text or ""
        media = event.message.media

        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {msg_text[:60].strip()}...")

        # –£–¥–∞–ª—è–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        msg_text = re.sub(r'\(https?://[^)]*\)', '', msg_text)
        msg_text = re.sub(r'https?://\S+', '', msg_text)

        # –ó–∞–º–µ–Ω—è–µ–º "‚û°Ô∏è–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è..." –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—É—é —Å—Ç—Ä–æ–∫—É
        msg_text = re.sub(r'‚û°Ô∏è–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è.*', 'üá∫üá¶ <a href="https://t.me/+9RxqorgcHYZkYTQy">–ù–µ–±–µ—Å–Ω–∏–π –í–∞—Ä—Ç–æ–≤–∏–π</a>', msg_text)

        # –£–¥–∞–ª—è–µ–º –≤—Å—ë –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –º—É—Å–æ—Ä
        lines = msg_text.strip().splitlines()
        clean_lines = [line.strip() for line in lines if line.strip()]
        if not clean_lines:
            return

        first_line = clean_lines[0]
        full_clean = []

        if "–ü–æ–¥—Ä–æ–±–∏—Ü—ñ" in msg_text:
            for line in clean_lines:
                if "–ü–æ–¥—Ä–æ–±–∏—Ü—ñ" not in line and "‚û°Ô∏è–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è" not in line:
                    full_clean.append(line)
        elif len(clean_lines) > 1:
            full_clean = [first_line]
        else:
            full_clean = clean_lines

        if not full_clean:
            logger.info("üßπ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
            return

        final_text = "\n\n".join(full_clean)

        # –î–æ–±–∞–≤–∏–º –≤ –æ—á–µ—Ä–µ–¥—å
        message_queue.append((final_text, media))
        last_activity_time = datetime.now()
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å")

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π", exc_info=True)

# === –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—á–µ—Ä–µ–¥–∏ ===
async def process_queue():
    while True:
        if message_queue:
            text, media = message_queue.popleft()
            try:
                if media:
                    await client.send_file(destination_channel_id, media, caption=text, parse_mode="html")
                    logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–¥–∏–∞")
                else:
                    await client.send_message(destination_channel_id, text, link_preview=False, parse_mode="html")
                    logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –º–µ–¥–∏–∞")
            except Exception as e:
                logger.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è", exc_info=True)
        await asyncio.sleep(random.uniform(1, 3))  # –ó–∞–¥–µ—Ä–∂–∫–∞
        if not message_queue:
            await asyncio.sleep(1)

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    await client.start()
    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
    asyncio.create_task(client.run_until_disconnected())
    asyncio.create_task(process_queue())
    asyncio.create_task(periodic_fake_message())
    asyncio.create_task(check_inactivity())

    # Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    loop = asyncio.get_running_loop()
    await loop.run_in_executor(None, run_flask)

# === –ó–∞–ø—É—Å–∫ ===
if __name__ == "__main__":
    asyncio.run(main())
